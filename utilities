def find_max_conc(sens_conc,sensor_locx,sensor_locy):
  import numpy as np 
  indices = np.argsort(sens_conc)
  sens_conc_new = sens_conc[indices]
  sens_locx_new = sensor_locx[indices]
  sens_locy_new = sensor_locy[indices]
  return sens_conc_new[-4:], sens_locx_new[-4:], sens_locy_new[-4:]
  
# Module to define locations of ground sensors.
def sens_loc_corner(min_loc,max_loc,num, sensor_locx,sensor_locy):
    
    if num >= 1:
        sensor_locx[0]=min_loc
        sensor_locy[0]=max_loc
    if num >= 2:
        sensor_locx[1]=max_loc
        sensor_locy[1]=min_loc
    if num >= 3:
        sensor_locx[2]=max_loc/2 #*0.99
        sensor_locy[2]=max_loc/2 #*0.99
    if num >= 4:
        sensor_locx[3]=min_loc #max_loc
        sensor_locy[3]=min_loc #max_loc
        if num == 0:
            print 'Sorry, You cannot solve with Zero sensors!'
    if num < 0:
        print 'Sorry, You cannot have Negative sensors!'
    return sensor_locx, sensor_locy
    
# Module to define bus locations
def bus(max_loc,num1,num2,roadgrid,sensor_locx,sensor_locy):
    import numpy as np    
    for isens in range(num1,num2):
        valid=False
        count = 0
        while (valid == False and count < 10):
#       To make sure it doesn't get into an infinite loop
           count = count + 1
           x=np.random.rand()*max_loc
           y=np.random.random()*max_loc
           print(x,y,roadgrid[x,y])
           if roadgrid[x,y] == 1:
              sensor_locx[isens]=x
              sensor_locy[isens]=y
              valid=True

    return sensor_locx,sensor_locy
  
#Module to define locations of drones  
def sens_loc_drones(min_loc,max_loc,num1,num2,sensor_locx,sensor_locy):
    import numpy as np  
    for isens in range(num1,num2):
   
        sensor_locx[isens]= np.random.uniform(min_loc,max_loc)
        sensor_locy[isens]= np.random.uniform(min_loc,max_loc)
    
    return sensor_locx,sensor_locy   
  
# Module to define source location, source concentration, sensor concentrations, + uncertainty

def defconc(minconc,maxconc,minloc,maxloc,numsens,sensor_locx,sensor_locy,sigma_error):
    import numpy as np 
    source_conc = np.random.uniform(minconc,maxconc)
    source_locx=np.random.uniform(minloc,maxloc)
    source_locy=np.random.uniform(minloc,maxloc)
   
    sensor_conc = source_conc/((source_locx-sensor_locx)**2+(source_locy-sensor_locy)**2)
    
    if (sigma_error != 0):
        error=np.random.normal(0,sigma_error/100.0,numsens)
    else:
        error = np.zeros(numsens)
        
    sensor_conc = sensor_conc*(1.0-error)
    
    return source_conc,source_locx, source_locy, sensor_conc

    
def find_solution(fout,x0,y0,c0,minconc,maxconc,mingrid,maxgrid,sens_conc,sensor_locx,sensor_locy,no_sol_count):

    source_str = 'Source X Location:'+str(x0)+' Y Location: '+str(y0)+' Concentration: '+str(c0)+'\n'
    sens_x_str = 'Sensor  X Loctions '+str(sensor_locx)+'\n'
    sens_y_str = 'Sensor Y Locations '+str(sensor_locy)+'\n'
    sens_conc_str = 'Sensor Concentrations '+str(sens_conc)+'\n'
   
    A= sens_conc[0]-sens_conc[1]
    B= -2*sensor_locx[0]*sens_conc[0]+2*sensor_locx[1]*sens_conc[1]
    C= -2*sensor_locy[0]*sens_conc[0]+2*sensor_locy[1]*sens_conc[1]
    D= sens_conc[0]*(sensor_locx[0]**2+sensor_locy[0]**2)-sens_conc[1]*(sensor_locx[1]**2+sensor_locy[1]**2)

    E= sens_conc[2]-sens_conc[3]
    F= -2*sensor_locx[2]*sens_conc[2]+2*sensor_locx[3]*sens_conc[3]
    G= -2*sensor_locy[2]*sens_conc[2]+2*sensor_locy[3]*sens_conc[3]
    H= sens_conc[2]*(sensor_locx[2]**2+sensor_locy[2]**2)-sens_conc[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    I= sens_conc[1]-sens_conc[3]
    J= -2*sensor_locx[1]*sens_conc[1]+2*sensor_locx[3]*sens_conc[3]
    K= -2*sensor_locy[1]*sens_conc[1]+2*sensor_locy[3]*sens_conc[3]
    L= sens_conc[1]*(sensor_locx[1]**2+sensor_locy[1]**2)-sens_conc[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    M = B*I-A*J
    N = B*E-A*F

    num = N*A*L-N*I*D-M*A*H+M*D*E
    den = -C*E*M+A*G*M+N*I*C-N*A*K
    if (den != 0):
        y0c = (num)/(den)
        x0c = (A*H-D*E-(C*E-A*G)*y0c)/(B*E-A*F)
        c0c = sens_conc[0]*((sensor_locx[0]-x0c)**2 + (sensor_locy[0]-y0)**2)
        flag = True
    else:
        fout.write('no soln \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_conc_str)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if x0c < mingrid or x0c > maxgrid:
        fout.write('no soln not in x grid \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_conc_str)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if y0c < mingrid or y0c > maxgrid:
        fout.write('no soln not in y grid \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_conc_str)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if c0c < minconc or y0c > maxconc:
        fout.write('no soln conc less than 0 \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_conc_str)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    
    return c0c,x0c,y0c,flag,no_sol_count 
