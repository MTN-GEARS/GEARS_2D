import numpy as np
import math
import matplotlib.pyplot as plt
import sys
from matplotlib import colors
from utilities import *
import scipy.stats

#User Variables

num_sens_ground= 0 # number of sensors that are on the corners of the grid
num_sens_bus =0# number of sensors that are on a bus (random location on streets)
num_sens_drones=4 # number of sensors that are on a drone (random location anywhere)
numsens = num_sens_ground+num_sens_bus+num_sens_drones

#Costs of individual sensors

Drone_cost=300
Bus_cost=200
Ground_cost=150

cost=(num_sens_drones*Drone_cost)+(num_sens_bus*Bus_cost)+(num_sens_ground*Ground_cost)
print"$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
print"             Cost: "+str(cost)+'$'
print"$$$$$$$$$$$$$$$$$$$$$$$$$$$$"

# If you want buildings to block ground and bus sensors, set to True, otherwise, set to False.

turn_on_blocked = True

mincts = 1.0  # Minimum Count, can not be less than or equal 0
maxcts =1000.0

mingrid = 0.0

numrepeats=10000
sigma_error=25 # In percent, i.e. 25 is 25%.

name='jon'  # Choose which user is running this program.

# Create filename for text and plot output.

fname = name+'_'+str(num_sens_ground)+'_'+str(num_sens_bus)+'_'+str(num_sens_drones)+'_'+str(numrepeats)

# Based on user, define path.

if name=='jon':
    path='c:/users/richard/desktop/output/'
    
if name=='emf':
    path='C:/Users/ethan/Desktop/python_out/'
    
if name=='lat':
    path='/Users/ltriplett/Desktop/python/'
    
if name=='school':
    path='/Users/student/'

# Choose your grid name

fgrid=open(path+'grid_nate.txt','r')    

# Define output file name.
fout = open(path+fname,'w')

# Read in grid.  Use flipud because ....
roadgrid_all = np .flipud(np.loadtxt(fgrid))

# Subtract one because....
roadgrid = roadgrid_all[:-1]

#Define max grid, assumes the grid is square.
maxgrid =int(np.sqrt(roadgrid.size))

#Define location of buildings.  Flip x and y because ....
biy,bix= np.where((roadgrid) ==2)

# Zip the x and y grids together to create a tuple that can be compared 
# with line-of-sight calculation.
buildings= zip(bix,biy)

# input error checking

if mincts <=0:
 sys.exit('Mimimum Count cannot be less than or equal to 0.')   

if numrepeats <=0 or num_sens_bus<0 or num_sens_drones<0 or num_sens_ground<0:
    sys.exit('You have negative sensors, or you ran it 0 times')
    
#initialize variables
no_sol_count = 0

# define arrays

c0errcts=np.zeros(numrepeats)
c0errloc=np.zeros(numrepeats)

for it in range(0,numrepeats):
    c0errcts[it] = 0
    c0errloc[it]=0
    sens_cts = np.zeros(numsens)
    sensor_locx=np.zeros(numsens)
    sensor_locy=np.zeros(numsens)
    sens_cts_new = np.zeros(4)
    sensor_locx_new = np.zeros(4)
    sensor_locy_new = np.zeros(4)
    blocked= np.zeros(numsens,dtype=bool)    
    
#   Location Corner sensors
    if (num_sens_ground != 0): sensor_locx, sensor_locy = sens_loc_corner(mingrid,maxgrid,num_sens_ground,sensor_locx,sensor_locy)
    
#   Location Bus sensors
    if (num_sens_bus != 0): sensor_locx,sensor_locy=bus(mingrid,maxgrid,num_sens_ground, num_sens_ground+num_sens_bus,roadgrid,sensor_locx,sensor_locy)

#   Location Drone sensors
    if (num_sens_drones != 0): sensor_locx, sensor_locy   = sens_loc_drones(mingrid,maxgrid,num_sens_ground+num_sens_bus,numsens,sensor_locx,sensor_locy)

#   Calculated counts at sensors
    c0,x0,y0,sens_cts = defcts(mincts,maxcts,mingrid,maxgrid,numsens,sensor_locx,sensor_locy,sigma_error)
    
#   Calculate line-of-sight for each source (assumed) and ground or bus sensor.  Drones are assumed to not be blocked by buildings.
    if turn_on_blocked:
        for ig in range(0,num_sens_ground+num_sens_bus):
            blocked[ig] == False
            los = get_line((int(x0),int(y0)), (int(sensor_locx[ig]),int(sensor_locy[ig])))
            for il in range(0,len(los)):
                for ib in range(0,len(buildings)):
                    if los[il]==buildings[ib]:
                        blocked[ig]=True
                        
        for ig in range(num_sens_ground+num_sens_bus+1,numsens):
            blocked[ig]=False
#   If blocked = true, set concentration to 0.

    sens_cts[np.where(blocked==True)] = 0

#   If there are 4 or more sensors, find the sensors with the largest counts.
    if np.array(np.where(blocked==False)).size >= 4:
        sens_cts_new, sensor_locx_new, sensor_locy_new = find_max_cts(sens_cts, sensor_locx,sensor_locy)
    else:
        fout.write('Sorry, not more than 4 sensors')
        flag = False
    
#   Find solution
    c0c,x0c,y0c,flag,no_sol_count = find_solution(fout,x0,y0,c0,mincts,maxcts,mingrid,maxgrid,sens_cts_new,sensor_locx_new,sensor_locy_new,no_sol_count)

#   Calculate statistics.
    if flag == False:
        c0errcts[it]= float('nan')
        c0errloc[it] = float('nan')
        
    if flag == True:
        if c0 !=0:
            c0errcts[it] = (c0-c0c)/c0*100
        else:
            c0errcts[it] = float('nan')
        if (x0 ==0):
            c0errloc[it] =(y0-y0c)
        else:
            c0errloc[it] =float('nan')
        if (y0 ==0):
            c0errloc[it] =(x0-x0c)
        else:
            c0errloc[it] =float('nan')
        if x0 !=0 and y0 != 0:
            c0errloc[it] =np.sqrt((x0-x0c)**2+(y0-y0c)**2)
        else:
            c0errloc[it] =float('nan')

##MAKE IT RAIN

        if numrepeats <= 10:
            print('******************************************')
            print('Assumed Source Location: '+str(x0)+' , '+str(y0))
            print('Assumed Source Count: '+str(c0))
            print('--------------------------------------------------------')

            print('******************************************')
            print('Calculated Source Location: '+str(x0c)+' , '+str(y0c))
            print('Calculated Source Count: '+str(c0c))
            print('--------------------------------------------------------') 
            print('error',c0errcts[it])
 
            plt.figure()
            plt.xlim((mingrid-1,maxgrid+1))
            plt.ylim((mingrid-1,maxgrid+1))
            terrain=colors.ListedColormap(['green', 'gray','black'])
            plt.imshow(roadgrid_all, interpolation='nearest',cmap=terrain)
            symbol_mult = 70

            plt.scatter(x0c,y0c,symbol_mult,color='red', label='Calc')
            plt.scatter(x0,y0,symbol_mult,color='lime', marker = '*', label='Orig') 
   
            it0 = 0
            it1 = num_sens_ground
            plt.scatter(sensor_locx[it0:it1],sensor_locy[it0:it1],symbol_mult,color='orange', marker='s',label='ground')

            it0 = it1
            it1 = num_sens_ground+num_sens_bus
            plt.scatter(sensor_locx[it0:it1],sensor_locy[it0:it1],symbol_mult,color='yellow',label='bus')
            
            it0 = it1
            it1 = numsens
            plt.scatter(sensor_locx[it0:it1],sensor_locy[it0:it1],symbol_mult,color='blue',marker='^', label='drone')

            it0 = 0
            it1=4
            plt.scatter(sensor_locx_new[it0:it1],sensor_locy_new[it0:it1],(symbol_mult*0.5),color='magenta',label='4 closest')

            for ig in range(0,numsens):
                if blocked[ig] == True:
                    plt.scatter(sensor_locx[ig],sensor_locy[ig],symbol_mult*2,color='red',marker='x')
 
            plt.legend(bbox_to_anchor=(1.05,1),loc=2,borderaxespad=0,scatterpoints=1,fontsize=10)


ctsc0erravg=scipy.stats.nanmean(c0errcts)
ctsc0errmed=scipy.stats.nanmedian(c0errcts)
ctsc0errstd=scipy.stats.nanstd(c0errcts)
locc0erravg=scipy.stats.nanmean(c0errloc)
locc0errmed=scipy.stats.nanmedian(c0errloc)
locc0errstd=scipy.stats.nanstd(c0errloc)


print ("Avg error c0",ctsc0erravg)
print ("Median error c0",ctsc0errmed)
print ("Std error c0",ctsc0errstd)
print("******************************")
print ("Avg error loc",locc0erravg)
print ("Median error loc",locc0errmed)
print ("Std error loc",locc0errstd)

print ("No Solution Count", no_sol_count, no_sol_count/float(numrepeats)*100)

fout.write ("Avg error c0 "+ str(ctsc0erravg)+'\n')
fout.write("No Solution Count "+ str(no_sol_count)+' '+str(float(no_sol_count/numrepeats*100)))

if numrepeats > 1:

#  plot all simulations

    plt.figure()
    plt.hist(c0errcts,color='g',range=(min(c0errcts),max(c0errcts)),bins=20)

    plt.ylabel('Number of Times')
    plt.xlabel('Percent Error')
    plt.title('Counts')
    plt.savefig(path+fname+'_cts_hist.png')
    
    plt.figure()
    plt.hist(c0errloc,color='g',range=(min(c0errloc),max(c0errloc)),bins=20)

    plt.ylabel('Number of Times')
    plt.xlabel('Error')
    plt.title('Location')
    plt.savefig(path+fname+'_loc_hist.png')

 
#  zoom in   
    plt.figure()
    plt.ylim(0,200)
    plt.xlim(-200,200)
    plt.hist(c0errcts,color='r',range=(min(c0errcts),max(c0errcts)),bins=20)
    
    plt.ylabel('Number of Times')
    plt.xlabel('Percent Error')
    plt.title('Counts')
    plt.savefig(path+fname+'_cts_hist_zoom.png')
    
    plt.figure()
    plt.ylim(0,200)
    plt.hist(c0errloc,color='r',range=(min(c0errloc),max(c0errloc)),bins=20)
    
    plt.ylabel('Number of Times')
    plt.xlabel('Error')
    plt.title('Location')
    plt.savefig(path+fname+'_loc_hist_zoom.png')

   
fout.close()
plt.show()
# To close all plots use: close("all") in command line.




#UTILITIES
#These would normally be in another file called 'utilities' but we couldn't submit 2 files

def get_line(start, end):

#   Calculates the line of sight from the estimated source to the sensor.
#   Provided by our mentor based on: http://www.roguebasin.com/index.php?title=Bresenham%27s_Line_Algorithm

    """Bresenham's Line Algorithm
    Produces a list of tuples from start and end
 
    >>> points1 = get_line((0, 0), (3, 4))
    >>> points2 = get_line((3, 4), (0, 0))
    >>> assert(set(points1) == set(points2))
    >>> print points1
    [(0, 0), (1, 1), (1, 2), (2, 3), (3, 4)]
    >>> print points2
    [(3, 4), (2, 3), (1, 2), (1, 1), (0, 0)]
    """
    # Setup initial conditions
    x1, y1 = start
    x2, y2 = end
    dx = x2 - x1
    dy = y2 - y1
 
    # Determine how steep the line is
    is_steep = abs(dy) > abs(dx)
 
    # Rotate line
    if is_steep:
        x1, y1 = y1, x1
        x2, y2 = y2, x2
 
    # Swap start and end points if necessary and store swap state
    swapped = False
    if x1 > x2:
        x1, x2 = x2, x1
        y1, y2 = y2, y1
        swapped = True
 
    # Recalculate differentials
    dx = x2 - x1
    dy = y2 - y1
 
    # Calculate error
    error = int(dx / 2.0)
    ystep = 1 if y1 < y2 else -1
 
    # Iterate over bounding box generating points between start and end
    y = y1
    points = []
    for x in range(x1, x2 + 1):
        coord = (y, x) if is_steep else (x, y)
        points.append(coord)
        error -= abs(dy)
        if error < 0:
            y += ystep
            error += dx
 
    # Reverse the list if the coordinates were swapped
    if swapped:
        points.reverse()
    return points
    
def find_max_cts(sens_cts,sensor_locx,sensor_locy):

# Describe.....
# Algorithm developed and programmed by Ethan Fisk.

  import numpy as np 

  indices = np.argsort(sens_cts)
  sens_cts_new = sens_cts[indices]
  sens_locx_new = sensor_locx[indices]
  sens_locy_new = sensor_locy[indices]
  return sens_cts_new[-4:], sens_locx_new[-4:], sens_locy_new[-4:]
  
def sens_loc_corner(min_loc,max_loc,num, sensor_locx,sensor_locy):

#   Module to define locations of ground sensors.
#   Algorithm developed and programmed by Jonathan Triplett.
    
    if num >= 1:
        sensor_locx[0]=min_loc
        sensor_locy[0]=max_loc
    if num >= 2:
        sensor_locx[1]=max_loc
        sensor_locy[1]=min_loc
    if num >= 3:
        sensor_locx[2]=round(max_loc/2.0)+1
        sensor_locy[2]=round(max_loc/2.0)+1
    if num >= 4:
        sensor_locx[3]=min_loc 
        sensor_locy[3]=min_loc 
    if num >= 5:
        sensor_locx[4]=max_loc 
        sensor_locy[4]=max_loc  
    if num == 0:
        print 'Sorry, You cannot solve with Zero sensors!'
    if num < 0:
        print 'Sorry, You cannot have Negative sensors!'
        
    return sensor_locx, sensor_locy
    


def bus(min_loc,max_loc,num1,num2,roadgrid,sensor_locx,sensor_locy):

#   Module to define bus locations.
#   Algorithm developed and programmed by Ethan Fisk.

    import numpy as np    
    for isens in range(num1,num2):
        valid=False
        count = 0
        while (valid == False and count < 50):
#       To make sure it doesn't get into an infinite loop
           count = count + 1
           x=(np.random.randint(min_loc+1,max_loc-1))
           y=(np.random.randint(min_loc+1,max_loc-1))

           if roadgrid[y,x] == 1 and x != min_loc and y != min_loc and x != max_loc and y != max_loc:
              sensor_locx[isens]=x
              sensor_locy[isens]=y
              
              valid=True

    return sensor_locx,sensor_locy
  

def sens_loc_drones(min_loc,max_loc,num1,num2,sensor_locx,sensor_locy):

#   Module to define locations of drones.  
#   Algorithm developed and programmed by Nate Golden.

    import numpy as np  
    for isens in range(num1,num2):
   
        sensor_locx[isens]= np.random.randint(min_loc+1,max_loc-1)
        sensor_locy[isens]= np.random.randint(min_loc+1,max_loc-1)
    
    return sensor_locx,sensor_locy   
  
def defcts(mincts,maxcts,minloc,maxloc,numsens,sensor_locx,sensor_locy,sigma_error):

#   Module to define source location, source counts, sensor counts, + uncertainty
#   Algorithm developed and programmed by ??.

    import numpy as np 
    debug = False
    
    if debug:
        source_cts = 100
        source_locx = 10
        source_locy = 10
    else:
        source_cts = np.random.randint(mincts,maxcts)
        source_locx=float(np.random.randint(minloc+2,maxloc-2))
        source_locy=float(np.random.randint(minloc+2,maxloc-2))
    
    sensor_cts = source_cts/((source_locx-sensor_locx)**2+(source_locy-sensor_locy)**2)
    
    if (sigma_error != 0):
        error=np.random.normal(0,sigma_error/100.0,numsens)
    else:
        error = np.zeros(numsens)
        
    sensor_cts = sensor_cts*(1.0-error)
    
    return source_cts,source_locx, source_locy, sensor_cts

def find_solution(fout,x0,y0,c0,mincts,maxcts,mingrid,maxgrid,sens_cts,sensor_locx,sensor_locy,no_sol_count):

#   Describe....
#   Algorithm developed by mentor and programmed by Jonathan Triplett.

    source_str = 'Source X Location:'+str(x0)+' Y Location: '+str(y0)+' Counts: '+str(c0)+'\n'
    sens_x_str = 'Sensor  X Locations '+str(sensor_locx)+'\n'
    sens_y_str = 'Sensor Y Locations '+str(sensor_locy)+'\n'
    sens_cts_str = 'Sensor Counts '+str(sens_cts)+'\n'
    stars = '****************************************************\n'

    A= sens_cts[0]-sens_cts[1]
    B= -2*sensor_locx[0]*sens_cts[0]+2*sensor_locx[1]*sens_cts[1]
    C= -2*sensor_locy[0]*sens_cts[0]+2*sensor_locy[1]*sens_cts[1]
    D= sens_cts[0]*(sensor_locx[0]**2+sensor_locy[0]**2)-sens_cts[1]*(sensor_locx[1]**2+sensor_locy[1]**2)

    E= sens_cts[2]-sens_cts[3]
    F= -2*sensor_locx[2]*sens_cts[2]+2*sensor_locx[3]*sens_cts[3]
    G= -2*sensor_locy[2]*sens_cts[2]+2*sensor_locy[3]*sens_cts[3]
    H= sens_cts[2]*(sensor_locx[2]**2+sensor_locy[2]**2)-sens_cts[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    I= sens_cts[1]-sens_cts[3]
    J= -2*sensor_locx[1]*sens_cts[1]+2*sensor_locx[3]*sens_cts[3]
    K= -2*sensor_locy[1]*sens_cts[1]+2*sensor_locy[3]*sens_cts[3]
    L= sens_cts[1]*(sensor_locx[1]**2+sensor_locy[1]**2)-sens_cts[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    M = B*I-A*J
    N = B*E-A*F

    num = N*A*L-N*I*D-M*A*H+M*D*E
    den = -C*E*M+A*G*M+N*I*C-N*A*K
    if (den != 0 and (B*E-A*F) !=0 ):
        y0c = (num)/(den)
        x0c = (A*H-D*E-(C*E-A*G)*y0c)/(B*E-A*F)
        c0c = sens_cts[0]*((sensor_locx[0]-x0c)**2 + (sensor_locy[0]-y0)**2)
        flag = True
    else:
        fout.write('no soln \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_cts_str)
        fout.write(stars)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if x0c < mingrid or x0c > maxgrid:
        fout.write('no soln not in x grid \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_cts_str)
        fout.write(stars)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if y0c < mingrid or y0c > maxgrid:
        fout.write('no soln not in y grid \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_cts_str)
        fout.write(stars)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    if c0c < mincts or y0c > maxcts:
        fout.write('no soln cts less than 0 \n')
        fout.write(source_str)
        fout.write(sens_x_str)
        fout.write(sens_y_str)
        fout.write(sens_cts_str)
        fout.write(stars)
        c0c = float('nan')
        x0c = float('nan')
        y0c = float('nan')
        flag = False
        no_sol_count = no_sol_count + 1
    return c0c,x0c,y0c,flag,no_sol_count
