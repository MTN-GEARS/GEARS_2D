import numpy as np
import matplotlib.pyplot as plt
import sys
from matplotlib import colors
from utilities import *

#User Variables

num_sens_ground =4 # number of sensors that are on the corners of the grid
num_sens_bus =4   # number of sensors that are on a bus (random location on streets)
num_sens_drones=4 # number of sensors that are on a drone (random location anywhere)

minconc = 1.0  # Minimum Concentration, can not be less than or equal 0

maxconc =100.0
mingrid = 0.0

numrepeats=1
sigma_error=25

name='lat'  
if name=='jrt':
    fgrid = open("c:/users/richard/desktop/output/grid.txt",'r')
    fout = open("c:/users/richard/desktop/output/4each_25p_error",'w')
if name=='emf':
    fgrid = open("C:/Users/ethan/Desktop/python_out/grid.txt",'r')
    fout = open("C:/Users/ethan/Desktop/python_out/n8o_all_error",'w')
if name=='lat':
    fgrid = open("/Users/ltriplett/Desktop/python/grid.txt",'r')
    fout = open("/Users/ltriplett/Desktop/python/4each_25p_error",'w')
 
numsens = num_sens_ground+num_sens_bus+num_sens_drones
roadgrid = np .flipud(np.loadtxt(fgrid))
maxgrid =int(np.sqrt(roadgrid.size))
biy,bix = np.where((roadgrid)==2)
buildings = zip(bix,biy)

# input error checking

if minconc <=0:
 sys.exit('Mimimum Concentration cannot be less than or equal to 0.')   
negsens='Cannot have negative sensors!'

if numrepeats <=0:
    sys.exit('at least 1 run')
if num_sens_bus<0:
    sys.exit(negsens)
if num_sens_drones<0:
    sys.exit(negsens)
if num_sens_ground<0:
    sys.exit(negsens)
    
#initialize variables
no_sol_count = 0

# define arrays
c0err=np.zeros(numrepeats)
for it in range(0,numrepeats):
    acount = 0
    c0avg=0
    c0err[it] = 0
    sensor_locx=np.zeros(numsens)
    sensor_locy=np.zeros(numsens)

# Location Corner sensors
    if (num_sens_ground != 0): sensor_locx, sensor_locy = sens_loc_corner(mingrid,maxgrid,num_sens_ground, sensor_locx,sensor_locy)

# Location Bus sensors
    if (num_sens_bus != 0): sensor_locx,sensor_locy=bus(maxgrid,num_sens_ground, num_sens_ground+num_sens_bus,roadgrid,sensor_locx,sensor_locy)

# Location Drone sensors
    if (num_sens_drones != 0): sensor_locx, sensor_locy   = sens_loc_drones(mingrid,maxgrid,num_sens_ground+num_sens_bus,numsens,sensor_locx,sensor_locy)

# Calculated concentration at sensors
    c0,x0,y0,sens_conc = defconc(minconc,maxconc,mingrid,maxgrid,numsens,sensor_locx,sensor_locy,sigma_error)
    
# Find 4 largest concentrations
    sens_conc_new, sensor_locx_new, sensor_locy_new = find_max_conc(sens_conc, sensor_locx,sensor_locy)

# Find solution
    c0c,x0c,y0c,flag,no_sol_count = find_solution(fout,x0,y0,c0,minconc,maxconc,mingrid,maxgrid,sens_conc,sensor_locx,sensor_locy,no_sol_count)
    
    if flag == True:
        c0err[it] = (c0-c0c)/c0*100
        acount=acount + 1
        c0avg=c0avg+c0err[it]

        if numrepeats <= 10:
            print('******************************************')
            print('Assumed Source Location: '+str(x0)+' , '+str(y0))
            print('Assumed Source Concentration: '+str(c0))
            print('--------------------------------------------------------')

            print('******************************************')
            print('Calculated Source Location: '+str(x0c)+' , '+str(y0c))
            print('Calculated Source Concentration: '+str(c0c))
            print('--------------------------------------------------------') 
            print('error',c0err[it])
 
         
            plt.xlim((mingrid-1,maxgrid+1))
            plt.ylim((mingrid-1,maxgrid+1))
            terrain=colors.ListedColormap(['green', 'gray','black'])
            roadgrid = np.flipud(roadgrid)
            plt.imshow(roadgrid, interpolation='nearest',cmap=terrain)
            plt.grid(True)
            symbol_mult = 10
            for it in range(0,numsens):
                plt.scatter(x0c,y0c,symbol_mult*c0c,color='green')
                plt.scatter(x0,y0,symbol_mult*c0,color='red', marker = '*') 
   
            for it in range(0,num_sens_ground):
                plt.scatter(sensor_locx[it],sensor_locy[it],symbol_mult*maxgrid*sens_conc[it],color='orange', marker='s')

            for it in range(num_sens_ground,num_sens_ground+num_sens_bus):
                plt.scatter(sensor_locx[it],sensor_locy[it],symbol_mult*maxgrid*sens_conc[it],color='purple')
            
            for it in range(num_sens_ground+num_sens_bus,numsens):
                plt.scatter(sensor_locx[it],sensor_locy[it],symbol_mult*maxgrid*sens_conc[it],color='black',marker='8')

            for it in range(0,4):
                plt.scatter(sensor_locx_new[it],sensor_locy_new[it],(symbol_mult-8)*maxgrid*sens_conc_new[it],color='yellow')

if acount > 0: c0avg=c0avg/acount

print ("Avg error c0",c0avg)
print ("No Solution Count", no_sol_count)

fout.write ("Avg error c0 "+ str(c0avg)+'\n')
fout.write("No Solution Count "+ str(no_sol_count))
if numrepeats > 1:

#  plot all simulations
    plt.hist(c0err,color='g',bins=20)

    plt.ylabel('Number of Times')
    plt.xlabel('Percent Error')
    plt.figure()
 
#  zoom in   
    plt.ylim(0,200)
    plt.hist(c0err,color='r',bins=20)
    
    plt.ylabel('Number of Times')
    plt.xlabel('Percent Error')
   
fout.close()
plt.show()
