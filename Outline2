import numpy as np
#import math
import matplotlib.pyplot as plt


# Define modules

# Module to define locations of ground sensors.
def sens_loc_corner(min_loc,max_loc,num):
    #print(num)
    if num >= 1:
        sensor_locx[0]=min_loc
        sensor_locy[0]=max_loc
    if num >= 2:
        sensor_locx[1]=max_loc
        sensor_locy[1]=min_loc
    if num >= 3:
        sensor_locx[2]=max_loc
        sensor_locy[2]=max_loc
    if num >= 4:
        sensor_locx[3]=0.000000000000001 #min_loc*0.8
        sensor_locy[3]=0.000000000000001 #min_loc*0.8
    if num == 0:
        print 'Sorry, You cannot solve with Zero sensors!'
    if num < 0:
        print 'Sorry, You cannot have Negative sensors!'
    return sensor_locx, sensor_locy
    
# Module to define bus locations
def bus(max_loc):
    valid=False
    count = 0
    while (valid == False and count < 10):
        print ('In here',count)
        count = count + 1
        x=np.random.random()*maxgrid
        y=np.random.random()*maxgrid
        
        if x >= 2 and x <= 3:
            busx=x
            busy=y
            valid=True
            print('busx', busx,busy,valid)
        elif y > 2 and y < 3:
            busx=x
            busy=y
            valid=True
            print('busy', busx,busy,valid)
    return busx,busy
  
#Module to define locations of drones  
def sens_loc_drones(min_loc,max_loc,numsens):
     drone_locx= np.random.uniform(min_loc,max_loc,numsens)
     drone_locy= np.random.uniform(min_loc,max_loc,numsens)
     return drone_locx, drone_locy   
  
# Module to define source location, source concentration, sensor concentrations, + uncertainty
  
def defconc(minconc,maxconc,minloc,maxloc,sensor_locx,sensor_locy,sigma_error):
    return
#Module to define error

def error(minerror,maxerror):
    error=np.random.normal(minerror,maxerror)
    return error

#def defconc(minconc,maxconc,minloc,maxloc,numsens,sigma_error):
    source_conc = np.random.uniform(minconc,maxconc)
    source_locx=np.random.uniform(minloc,maxloc)
    source_locy=np.random.uniform(minloc,maxloc)
    print(source_conc,source_locx,source_locy)
    sensor_conc = source_conc/((source_locx-sensor_locx)**2+(source_locy-sensor_locy)**2)
    print(sensor_conc)
   # sensor_locx = np.random.uniform(minloc,maxloc,numsens)
   # sensor_locy = np.random.uniform(minloc,maxloc,numsens)
    #if (sigma_error > 0): 
        #error=np.random.normal(0,sigma_error,numsens)
    #else:
    # error 
        

    return source_conc,source_locx, source_locy, sensor_conc
#    return source_conc,source_locx, source_locy
    
def find_solution(sens_conc,sensor_locx,sensor_locy):
    A= sens_conc[0]-sens_conc[1]
    B= -2*sensor_locx[0]*sens_conc[0]+2*sensor_locx[1]*sens_conc[1]
    C= -2*sensor_locy[0]*sens_conc[0]+2*sensor_locy[1]*sens_conc[1]
    D= sens_conc[0]*(sensor_locx[0]**2+sensor_locy[0]**2)-sens_conc[1]*(sensor_locx[1]**2+sensor_locy[1]**2)

    E= sens_conc[2]-sens_conc[3]
    F= -2*sensor_locx[2]*sens_conc[2]+2*sensor_locx[3]*sens_conc[3]
    G= -2*sensor_locy[2]*sens_conc[2]+2*sensor_locy[3]*sens_conc[3]
    H= sens_conc[2]*(sensor_locx[2]**2+sensor_locy[2]**2)-sens_conc[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    I= sens_conc[1]-sens_conc[3]
    J= -2*sensor_locx[1]*sens_conc[1]+2*sensor_locx[3]*sens_conc[3]
    K= -2*sensor_locy[1]*sens_conc[1]+2*sensor_locy[3]*sens_conc[3]
    L= sens_conc[1]*(sensor_locx[1]**2+sensor_locy[1]**2)-sens_conc[3]*(sensor_locx[3]**2+sensor_locy[3]**2)

    M = B*I-A*J
    N = B*E-A*F

    num = N*A*L-N*I*D-M*A*H+M*D*E
    den = -C*E*M+A*G*M+N*I*C-N*A*K
    if (den != 0):
        y0c = (num)/(den)
        x0c = (A*H-D*E-(C*E-A*G)*y0c)/(B*E-A*F)
        c0c = sens_conc[0]*((sensor_locx[0]-x0c)**2 + (sensor_locy[0]-y0)**2)
    else:
        print('no soln')

    return c0c,x0c,y0c

# Main Program

#Define constants

plt.clf()
minconc = 1
maxconc = 100
mingrid = 0
maxgrid = 6
numsens = 4
sigma_error = 0
#sens_loc_corner(1,6,4)
# define arrays
sensor_locx=np.zeros(numsens)
sensor_locy=np.zeros(numsens)



sensor_locx, sensor_locy = sens_loc_corner(mingrid,maxgrid,numsens)
#sensor_locx, sensor_locy   = sens_loc_drones(mingrid,maxgrid,numsens)
busx,busy=bus(maxgrid)



print(sensor_locx,sensor_locy)
#c0,x0,y0,sens_conc,sens_locx, sens_locy = defconc(minconc,maxconc,mingrid,maxgrid,numsens,sigma_error)
#c0,x0,y0,sens_conc = defconc(minconc,maxconc,mingrid,maxgrid,numsens,sigma_error)
c0,x0,y0,sens_conc = defconc(minconc,maxconc,mingrid,maxgrid,sensor_locx,sensor_locy,sigma_error)
#c0,x0,y0= defconc(minconc,maxconc,mingrid,maxgrid,numsens,sigma_error)




#sens_locx[2] = busx
#sens_locy[2]=busy
#sens_conc[2] = c0/((x0-sens_locx[2])**2+(y0-sens_locy[2])**2)

# Find solution
#(sens_conc,sensor_locx,sensor_locy):
c0c,x0c,y0c = find_solution(sens_conc,sensor_locx,sensor_locy)

# Print solution
print('******************************************')
print('Assumed Source Location: '+str(x0)+' , '+str(y0))
print('Assumed Source Concentration: '+str(c0))
print('--------------------------------------------------------')

print('******************************************')
print('Calculated Source Location: '+str(x0c)+' , '+str(y0c))
print('Calculated Source Concentration: '+str(c0c))
print('--------------------------------------------------------') 

#Plot solution

#plt.scatter(x0,y0,4*c0,color='red')
#print('busx,busy after',busx,busy)
#plt.scatter(busx,busy,100,color='purple',marker='^')
for it in range(0,numsens):
    plt.scatter(sensor_locx[it],sensor_locy[it],50*sens_conc[it],color='blue')

plt.scatter(x0c,y0c,4*c0c,color='green')
plt.show()
print sensor_locx , sensor_locy
